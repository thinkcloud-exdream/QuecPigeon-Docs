.. vim: syntax=rst

.. highlight:: python


关于 QuecPython
=================================================

BC25_QuecPython_EVB_V1.0 和 BC25_QuecPython_EVB_V1.2 开发板支持标准 AT 指令、QuecOpen（CSDK）和 QuecPython 三种开发方式。本文档主要介绍 QuecPython 开发方式。如需获取标准 AT 或 CSDK 相关的技术支持，请联系官方销售人员或本地代理商。


什么是 QuecPython
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Python 是一种热门的解释型脚本语言。因其语法简单、功能丰富的特点，被广泛应用于服务器、数据库、图像处理、人工智能等领域。MicroPython 是 Python 语言的精简高效实现。它基本兼容 Python 3.4 版本的语法特性，同时进行了针对性优化，使其能够在微控制器和其他资源受限的环境中运行。目前，MicroPython 已经支持包括 STM32、ESP32、RP2040 在内的多种硬件平台。

移远将 MicroPython 移植到了多款无线通信模块上，并增加了大量与物联网和无线通信相关的功能库，称之为 QuecPython。由此，用户可以使用 MicroPython 脚本对移远通信模块进行快速便捷的二次开发。

与传统的基于 AT 指令交互的开发方式相比，在使用 QuecPython 开发时，模块本身被作为系统主控使用，用户应用（APP）直接置于模块内部运行，整个系统中无需外部处理器（如 MCU），因而可以有效地达到精简硬件设计、降低器件成本、缩小产品尺寸的目的。

目前，QuecPython 方案已经在智能家电、工业控制、智慧交通等场景得到应用。各类公司基于 QuecPython 方案推出的产品包括车载定位器、DTU、4G 对讲机等数十种。


QuecPython 与传统开发方式的差异
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

与基于 AT 指令的模块开发的差异
-------------------------------------------------

- QuecPython 开发和传统 AT 开发可视作两种相互独立的开发方式。QuecPython 并不是在 AT 指令开发的基础上增加的新功能，而是一种针对模块的二次开发（OpenCPU）方式。
- QuecPython 固件中仅保留了最基础的 AT 指令交互功能，大部分功能性 AT 指令都会失效或返回异常结果。
- 用户在给模块烧录 QuecPython 固件后，请勿继续使用 AT 指令进行开发。


与传统单片机和 CSDK 开发的差异
-------------------------------------------------

- QuecPython 作为脚本语言开发方式，不存在传统意义上的 SDK。
- 开发前，需要用户预先在模块内手动烧入专门的包含有 QuecPython 脚本语言解释器的固件。
- 用户在电脑端使用 VSCode 或其他编辑器编写代码（脚本文件）后，无需编译，也无需单独的烧录器和仿真器，直接通过 USB 线缆将脚本文件拷贝到模块内即可调试和运行。
- 像手机 APP 一样，模块内可同时存储多个脚本和其他资源文件，用户可根据需求对脚本文件进行非常灵活的调用和运行。
- QuecPython 并不具备传统单片机的断点、单步运行、内存分析等调试手段，而是通过脚本执行的效果（或报错信息）来判断其状态。


与电脑端 Python 开发的差异
-------------------------------------------------

- 和传统的电脑端 Python（CPython）开发不同，QuecPython 存在大量只能在模块端运行的功能库。
- 在程序开发过程中，电脑端的各类 IDE 只能起到简单的代码编辑作用，编写完成的脚本需要手动下载到模块内才能实现运行和调试。
- QuecPython 与 Python 3.4 在核心语法上保持兼容性，但在很多用法细节上依旧存在差异。
- 对于初学者而言，不建议在编写代码时使用过于智能的 IDE 工具，避免其内置的基于 CPython 的语法提示和补全功能造成误导。
- 有过 Python 开发经历的用户应注意避免被过往的开发经验误导。


与 MicroPython 开发的差异
-------------------------------------------------

- QuecPython 是 MicroPython 在移远通信模块上的移植。
- 由于 MicroPython 缺少完善的统一规范，根据开发者和硬件平台的不同，其内置的功能（库）数量和各类功能函数的用法均可能存在差异。
- 能在 ESP32 等平台上正常运行的 MicroPython 代码，通常无法在不经任何修改的情况下直接复制到移远模块中运行。
- 应避免将其他 MicroPython 硬件平台的资料和开发经验直接代入到 QuecPython 开发中。





